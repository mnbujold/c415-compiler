# Written by Mike Bujold
# Includes:
#       - cos
#       - tan
#       - sin
#
# ASC for trigonometric operations
#
# Stack:
#       - top of stack
#       - old display register value
#       - return address
#       - real value
#
#
# Return at the location of value
#

# Cosine
cos
        CONSTR  1.57079633
        PUSH    -3[0]
        SUBR
        DUP
        CALL    0,sin
        ADJUST -1
        POP     -4[0]
        ret     0

# Tangent
tan
        PUSH    -3[0]
        CALL    0,sin
        PUSH    -3[0]
        DUP
        CALL    0,cos
        ADJUST -1
        DIVR
        POP     -4[0]
        RET     0
# Sine
sin
        PUSH    -3[0]   # 0[0] - real value
        CONSTI  0       # 1[0] - loop counter (n)
        PUSH    -3[0]   # 2[0] - term (real)
        PUSH    -3[0]   # 3[0] - sum (real)

        # Make real value the right size
        PUSH   0[0]
        DUP
        CONSTR 6.283185307179586476925286766559005768394338798750
        DIVR
        RTOI
        ITOR
        CONSTR 6.283185307179586476925286766559005768394338798750
        MULR
        SUBR
        DUP
        DUP
        POP     0[0]
        POP     2[0]
        POP     3[0]
        
#     for(int n=1; n<10; ++n)
sin_func_loop
        PUSH    1[0]
        CONSTI  1
        ADDI
        DUP
        POP     1[0]
        CONSTI  20      # n < 20 (increase for precision - sort of)
        LTI
        IFZ     sin_func_d
#     term *= x*x / ( 2*n * (2*n+1) );
        PUSH    0[0]
        DUP
        MULR

        CONSTI  1
        CONSTI  2
        PUSH    1[0]
        MULI
        ADDI
        CONSTI  2
        PUSH    1[0]
        MULI
        MULI
        ITOR

        DIVR

        PUSH    2[0]
        MULR
        POP     2[0]    # update

#     sum += n%2 ? -term : term;
        PUSH    1[0]
        CONSTI  2
        MOD
        IFZ     sin_func_p_u

        PUSH    2[0]
        CONSTR  -1
        MULR
        PUSH    3[0]
        ADDR
        POP     3[0]
        GOTO    sin_func_loop
sin_func_p_u
        PUSH    2[0]
        PUSH    3[0]
        ADDR
        POP     3[0]
        GOTO    sin_func_loop        
sin_func_d
#     return sum;
       PUSH    3[0]
       POP     -4[0]
       ADJUST  -4
       RET     0


# this will use a taylor series to calculate arctan
# Stack (from bottom:)
# x value
# NEG flag
# n value
# max n value
# y value (return)

arctan
        PUSH -3[0]      # x value
        DUP
        IFZ zeroarctan  # x is zero, don't bother doing anything else, jump to end
        CONSTR 0        # NEG flag

#if x > 1, lgarctanloop

        PUSH 0[0]       # if x < 0
        CONSTR 0
        LTR             # == 1 if neg, 0 if pos
        POP 1[0]        # set NEG flag

        PUSH 0[0]       # place x on stack
        PUSH 1[0]       # get NEG flag
        IFZ skiptosizecheck # if number is positive...
        CONSTR -1 
        MULR            # otherwise, make positive...

skiptosizecheck
        # if abs(x) > 1, use lgarctanloop
        CONSTR 1
        GTR
        IFZ startarctanloop
        GOTO lgarctanloop

startarctanloop
        CONSTR 0        # 2[0] n value
        CONSTR 40       # 3[0] max n value (adjust to change precision)
        CONSTR 0        # 4[0] y (rtn) value
arctanloop
        CONSTR -1       # (-1)^n
        DUP
        PUSH 2[0]
        CONSTR 1
        ADDR       
        CALL 0,powercalc
        ADJUST -2

        PUSH 0[0]       # x
        DUP
        CONSTR 1
        CONSTR 2
        PUSH 2[0]
        MULR
        ADDR            # 1+2n
        CALL 0,powercalc
        ADJUST -2       # little quirk...must move SP up 1 on ret

        MULR
        CONSTR 1
        CONSTR 2
        PUSH 2[0]
        MULR
        ADDR

        DIVR
        PUSH 4[0]
        ADDR
        POP 4[0]

        PUSH 3[0]      # max n
        PUSH 2[0]      # n
        SUBR           # if n==n...
        IFZ endarctanloop
        PUSH 2[0]
        CONSTR 1
        ADDR
        POP 2[0]       # n++ 
        GOTO arctanloop
endarctanloop
        PUSH 4[0]       # Adjust the value since formula flips sign...
        CONSTR -1
        MULR
        POP 0[0]        # place answer in x position
        ADJUST -4
        POP -4[0]       # ret value
        RET 0


lgarctanloop
        # try this to approximate values that are abs(x)>1
        # arctan(x) = 2*arctan(x/1+sqrt(1+x^2))
        PUSH 0[0]       # x
        PUSH 1[0]       # check sign flag
        IFZ beginlgarctan
        CONSTR -1
        MULR
beginlgarctan
        DUP             # x
        DUP             # x
        MULR            # x^2
        CONSTR 1        
        ADDR            # 1+x^2
        DUP
        CALL 0,sqrt
        ADJUST -1
        CONSTR 1
        ADDR
        DIVR
        DUP      
        CALL 0,arctan
        ADJUST -1
        CONSTR 2
        MULR
        POP -4[0]
        ADJUST -2

        RET 0

zeroarctan
        POP -4[0]
        RET 0
        
# MATH FUNCTIONS END
#