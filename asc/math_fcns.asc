# Math Functions - Some are not in PAL spec, but used to streamline
# implementation of other functions
# Contents:
#  ln           - ln(x)
#  exp          - e^x
#  sqri         - x^2 (where x E I)
#  sqrr         - x^2 (where x E R)
#  absi         - abs(x) (where x E I)
#  absr         - abs(x) (where x E R)
#  sqrt         - sqrt(x)
#  
#  Not requried by spec, but included to simplify implementation of above:
#  powercalc   - x^y
#  invpowercalc - x^-y
#  factorialyo - x!
#

# Calculate ln using a mercator series expansion
ln
        PUSH -3[0]   # x
        CONSTR 0     # space for y
        CONSTR 1000  # max n (even, doesn't change,normally)
        CONSTR 1     # Start counter value, n=1 (3[0])
        ADJUST 1     # Intermediate var (4[0])

big_ln_loop
        PUSH 0[0] # Push x on stack
        DUP
        CONSTR 1 # Push 1 on stack
        SUBR # x-1 now on stack
        DIVR # x / (x-1)
        POP 4[0] # Place in interm. value

        PUSH 4[0]
        PUSH 3[0]
        CALL 0,powercalc
        ADJUST -1

        # whatever is left on stack is answer from pwrcalc
        PUSH 3[0]  # n (counter) on stack
        MULR       # n * (x^n)
        POP 4[0]   # store in tmp var
        CONSTR 1   # 1 on stack
        PUSH 4[0]  # n * (x^n) on stack
        DIVR       # 1 / n*(x^n)
        PUSH 1[0]  # current answer
        ADDR # add this to existing answer
        POP 1[0] # put current answer into 'y'
        PUSH 2[0] # grab max n
        PUSH 3[0] # grab current n
        SUBR # max n == n?
        IFZ endbiglnloop
        PUSH 3[0]
        CONSTR 1
        ADDR
        POP 3[0] # n++

        GOTO big_ln_loop

endbiglnloop

        ADJUST -3
        POP -3[0]
        ADJUST -1

        RET 0


# Exp fcn - using maclaurin series
exp
        PUSH -3[0]   # x
        CONSTR 1     # space for y
        CONSTR 50  # max n (even, doesn't change,normally)
        CONSTR 1     # Start counter value, n=1 (3[0])
        ADJUST 1     # Intermediate var (4[0])

big_exp_loop
        PUSH 0[0]  # x
        PUSH 3[0]  # n
        CALL 0,powercalc
        ADJUST -1
        # whatever is left on stack is answer from pwrcalc
        
        PUSH 3[0]  # n     
        CALL 0,factorialyo

        DIVR       # x^n / n!
        PUSH 1[0]  # current answer
        ADDR # add this to existing answer
        POP 1[0] # put current answer into 'y'
        PUSH 2[0] # grab max n
        PUSH 3[0] # grab current n
        SUBR # max n == n?
        IFZ endbigexploop
        PUSH 3[0]
        CONSTR 1
        ADDR
        POP 3[0] # n++

        GOTO big_exp_loop

endbigexploop
        ADJUST -3
        POP -3[0]
        ADJUST -1

        RET 0

# Old idea - only works for integer x values
#        CONSTR 2.718281828459045235360287471352
#        PUSH -3[0]
#        CALL 0,powercalc

#        ADJUST -1
#        POP -3[0]
#        RET 0

sqri
         PUSH -3[0] # get x value
         DUP
         MULI
         POP -3[0]
         RET 0

sqrr
        PUSH -3[0]
        DUP
        MULR
        POP -3[0]
        RET 0

sqrt
        PUSH -3[0]
        CALL 0,ln
        CONSTR 0.5
        MULR
        CALL 0,exp
        POP -3[0]
        RET 0


absr
        PUSH -3[0]
        DUP
        CONSTR 0
        GTR         # is x > 0?
        IFNZ end_abs
        CONSTR -1
        MULR

absi
        PUSH -3[0]
        DUP
        CONSTI 0
        GTI         # is x > 0?
        IFNZ end_abs
        CONSTI -1
        MULI

end_abs
        POP -3[0]
        RET 0


# powercalc - calculates some value x^n
# Stack order for values (bottom up): x, n
powercalc
        PUSH -4[0]      # x value
        PUSH -3[0]      # n value
        DUP             # LET i = n
        PUSH 0[0]        # interm. value
        PUSH 1[0]       # check if n=0
        IFZ end_powercalc

powercalcloop
        PUSH 2[0] # i
        CONSTR 1
        SUBR
        IFZ end_powercalc
        PUSH 2[0] # i
        CONSTR 1
        SUBR
        POP 2[0] # i--
        PUSH 3[0]       # get interm value
        PUSH 0[0]
        MULR
        POP 3[0]
        GOTO powercalcloop

end_powercalc
        POP -4[0]
        ADJUST -3

        RET 0

invpowercalc
        PUSH -4[0]  #x value
        PUSH -3[0]  # n value
        CONSTR -1
        MULR
        CALL 0,powercalc
        ADJUST -1
        CONSTR 1
        PUSH 0[0]
        DIVR
        POP 0[0]
        POP -4[0]

        RET 0

        
        
# Factorial - recursive fcn
factorialyo
        PUSH -3[0]      # x value
        DUP
        CONSTR 1
        SUBR
        IFZ endfactorial
        DUP             # x
        CONSTR 1
        SUBR            # x-1
        CALL 0,factorialyo
        MULR
endfactorial
        POP -3[0]
        RET 0



# different factorial version that uses a loop
factorialloop
        PUSH -3[0] # x value
        DUP        # set n = x
        CONSTI 1 
        SUBI      # n-1
        DUP       # n-1
        IFZ donefactorial # if n=0, done here
        DUP
        POP 1[0]  # put decremented index back at 1[0]      
        PUSH 0[0] # current val
        MULI      # n-1 * current
        POP 0[0]  # put back

        GOTO factorialloop

donefactorial
        ADJUST -2
        POP -3[0]

        RET 0
