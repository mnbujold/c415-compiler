{
    9.pal
    Does the best of 6.pal (Precision - tests builtins, precision, and
    expressions) without pi, and adds interactive Gamma and factorial functions
    to futher test math and recursion.

    Output precision may vary due to builtin implementation. They probably won't
    get 15 significant digits of precision, though.
    
}
program BestOfPrecisionAndRecursion(useless, parameters);

const E = 2.718281828459045;
      GAMMA = 0.577215664901532;
      CONSTPRECISION = 15;
      BUILTINPRECISION = 6;
      NMAX = 3.40282347E38; // IEEE standard for largest positive value
      NMIN = 1 / NMAX;

type astring = array[1..5] of char;
      
var myE : real;
    myGamma : real;
    gammaInput : real;
    factInput : integer;
      
function confuseCompiler(value : real) : real;
// stops compilers from calculating values themselves, the cheaters!
    begin
        confuseCompiler := 1.0 * value;
    end;
      
{ Functions to compare builtin calculated values versus 'actual' values: }

function power(base : real; exponent : real) : real; // power or pow could be a builtin ...
// raises base to the power of exponent using builtins
    begin
        power := exp(exponent * ln(base));
    end;
    
function adjust(value : real; precision : integer; rounded : boolean) : real;
// returns value with precision number of decimal places, with rounding
// depending on rounded
    var realAdjusted : real;
        adjustment : real;
    
    begin
        adjustment := power(10, precision);
        realAdjusted := value * adjustment;
        
        if rounded then
            adjust := round(realAdjusted) / adjustment
        else
            adjust := trunc(realAdjusted) / adjustment;
    end;            

function compare(builtin : real; actual : real; precision : integer) : boolean;
// returns true if builtin equals actual at precision level of significant
// digits for any combination of the rounded or truncated cases
    begin
        compare := (adjust(builtin, precision, true) = adjust(actual, precision, true))
                or (adjust(builtin, precision, false) = adjust(actual, precision, false))
                or (adjust(builtin, precision, true) = adjust(actual, precision, false))
                or (adjust(builtin, precision, false) = adjust(actual, precision, true));
    end;

procedure checkPrecision(builtin : real; actual : real; constant : astring);
    begin
        writeln(constant, ' :', '\n');
        writeln('Builtin = ', builtin, ' | Actual = ', actual);
        
        if compare(builtin, actual, BUILTINPRECISION) then
            writeln('Calculated constant is correct to within 6 significant digits.')
        else
            writeln('Calculated constant does NOT have 6 significant digits of precision.');
        
        if compare(builtin, actual, CONSTPRECISION) then
        begin
            writeln('Calculated constant is correct to within 15 significant digits.');
            writeln('How did you do that?!')
        end
        else
            writeln('Calculated constant isn\'t ridiculously accurate.');
        
        writeln;
        writeln();
    end;
    
{ Functions calculate the math constants using builtins: }

function calculateE() : real;
// uses builtins to calculate e
    const NMAX = 9.99999999E7; // need smaller values so we don't overflow
          NMIN = 1 / NMAX;
      
    begin
        calculateE := power((1 + NMIN), NMAX);
    end;

function calculateGamma() : real;
// uses builtins to calculate gamma
    const MAXITERS = maxint * 1000.0;

    var gammaTemp : real;
        iteration : real;

    begin
        iteration := 1;
        gammaTemp := 0;
        
        while iteration < MAXITERS do
        begin
            gammaTemp := gammaTemp + (1 / iteration);
            iteration := iteration + 1;
        end;
        
        calculateGamma := gammaTemp - ln(MAXITERS);
    end;

{ Gamma and factorial functions: }
    
function gammaFunction(gammaInput : real) : real;
// returns a naive approximation of the gamma function on gammaInput
    const MAXITERS = maxint * 1000.0;

    var gammaTemp : real;
        iteration : real;

    begin
        iteration := 1;
        gammaTemp := 1;
        
        while iteration < MAXITERS do
        begin
            gammaTemp := gammaTemp * (iteration / (gammaInput + iteration));
            iteration := iteration + 1;
        end;
        
        gammaFunction := power(MAXITERS, gammaInput) * gammaTemp;
    end;
    
function factorial(int : integer) : integer;
// the factorial function!
    begin
        if int = 0 then
            factorial := 1
        else
            factorial := int * factorial(int - 1);
    end;
    
begin
    { Constants: }
    myE := calculateE();
    myGamma := calculateGamma();
    
    checkPrecision(myE, E, 'E    ');
    checkPrecision(myGamma, GAMMA, 'GAMMA');
    
    { Gamma function: }
    
    writeln;
 
    writeln('Gamma Function (<= 0 to exit)?');
    readln(gammaInput);
    
    while gammaInput > 0 do
    begin
        writeln;
        if gammaInput = 1 then
            writeln('Gamma(1) = 1')
        else
            writeln('Gamma(', gammaInput,') = ', gammaFunction(gammaInput - 1));
        writeln;
        
        writeln('Gamma (<= 0 to exit)?');
        readln(gammaInput);
    end;        

    { Factorial function: }
 
    writeln('Factorial (< 0 to exit)?');
    readln(factInput);
    
    while factInput >= 0 do
    begin
        writeln;
        writeln(factInput,'! = ', factorial(factInput));
        writeln;
        
        writeln('Factorial (< 0 to exit)?');
        readln(factInput);
    end; 
    
    writeln;
    
end.
