// Get the type checking to work ...

program aprogram(input, output);

const aNum = 1;
      aNum = 2; // Error!
      anotherbob = aNum;

type bob = (enum1, enum2);
     clark = bob;
     enum0 = (e00, e01, e02);
     bool = boolean;
     athing = array[1..10] of char;
     arec = record blah : integer end;
     anotherrec = record blah : boolean end;
     maybegoodRec = record end; // Error!

var joe : bob;
    text : clark;
    bar : athing;
    e11 : enum0;
    aboolean : bool;
    arrayA : array[1..10] of integer;
    arrayB : array[1..12] of integer;
    arrayBminus : array[0..10] of integer;
    arrayC : array[1..10] of real;
    arrayD : array[1..10] of array[1..10] of integer;
    arrayS : array['b'..'g'] of char;

procedure testArrays();
begin
    arrayA[5] := arrayC[7]; // Error!
    arrayA[3] := arrayB[3];
    arrayA[5] := arrayB; // Error!
    arrayA := arrayB; // Error!
    arrayA := arrayBminus; // Error!
end;
    
procedure foo(joe : enum0; foo :enum0);
    type enum1 = (e00, e11, e02);
         joe = bool; // Error!
    begin
    end;
    
procedure test(var bob : clark; jim : boolean);
    begin
    end;
    
function asdf(tool : bob) : bob;
begin
    anotherbob := tool; // Error!
    asdf := enum2;
end;

function anotherTest() : real;
begin
    writeln;
end; // Error!
    
procedure tim();
    var joe : (e1, ererer);
begin
    //joe := not 2;
end;
    
begin

test(); // Error!
test(enum1, true); // Error!
test(text, enum0); // Error!
test(text, e11); // Error!
test(text, aboolean);
joe := test(text, aboolean); // Error!
test(text, aboolean, joe); // Error!

joe := asdf(); // Error!
joe := asdf(joe);
bar := asdf(joe); // Error!
joe := asdf(e11); // Error!
joe := asdf(joe, e11); // Error!

writeln;
writeln();
writeln(aNum, anotherbob);

if (1 <> 0) then
    writeln
else if (aboolean) then
    writeln()
else
    foo(e11, e11);

while 1 <> 0 do
begin
exit;
end;

wilek aboolean do // Error!
exit; // Error!

while aboolean do
begin
    while 1 <> 0 do
    exit;
continue;
end;

while aboolean do
continue;

exit; // Error!

while asdf(joe) do // Error!
begin {
    char errMsg[75];
    sprintf(errMsg, , index, max);
    addTypeError(errMsg);
}

end;

continue; // Error!

if (1) then // Error!
    writeln;
    
if (text) then // Error!
    writeln;

arrayA[5] := 5;
arrayA[5.0] := 5; // Error!
arrayS['d'] := arrayS['f'];
arrayS['d'] := arrayS['j']; // Error!

arrayD[4] := arrayA;
arrayD[4,5] := 5;
arrayD[4][5] := 5;

arrayD[4] := 5; // Error!
arrayD[4,5] := arrayA; // Error!
arrayD[4,12] := 5; // Error!
arrayD[0][5] := 5; // Error!
aboolean[3] := 4; // Error!
aboolean[3,5] := aboolean; // Error!
arrayA[5, 5] := 5; // Error!

read;
readln;
read();
readln();

write;
writeln;
write();
writeln();

writeln(joe); // Error!

end.
