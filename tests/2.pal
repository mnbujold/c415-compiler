{
    2.pal
    Tests more valid and invalid name hiding and type usage.
    Errors:
    13:28 'real' already defined in the scope / 'real' not a type
    19:32 no 'ohNo' symbol defined / 'ohNo' already defined in the scope / 'ohNo' not a type
    25:35 'boolean' not a type / 'boolean' already defined in the scope
}
program Scoping (io, oi);

type duple = (element1, element2);

function rename(real : real) : integer; { $ERR_DATA$ [28, "'real' already defined in the scope / 'real' not a type", ["symbol 'real' already defined in this scope"]] $ERR_DATA$ }
    begin
        rename := ord(element2) + 40;
    end;
    
procedure break(var int : integer);
    var ohNo : array[duple] of ohNo; { $ERR_DATA$ [32, "no 'ohNo' symbol defined / 'ohNo' already defined in the scope / 'ohNo' not a type", ["no 'ohNo' symbol defined"]] $ERR_DATA$ }
    
    begin
        int := ord(int = 20);
    end;
    
function boolean(int : integer) : boolean; { $ERR_DATA$ [35, "'boolean' not a type / 'boolean' already defined in the scope", ["symbol 'boolean' not a type"]] $ERR_DATA$ }
    type anotherBool = duple;
    
    var truthVal : anotherBool;
        falseVal : duple;
        intVar : integer;

    begin
        truthVal := element1;
        falseVal := element2;
        intVar := int;
        break(intVar);
        
        if intVar = 0 then
            truthVal := element2
        else
            falseVal := element1;
        
        if intVar < 0 then
            falseVal := truthVal
        else
            truthVal := falseVal;
        
        boolean := truthVal = falseVal; // above error may chain here
    end;

begin

    if boolean(20) then
        writeln('something about 20')
    else if rename(40) = 40 then
        writeln('something about 40')
    else
        writeln('something about nothing');
end.
