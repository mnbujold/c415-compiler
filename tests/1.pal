{
    1.pal
    Tests ...
}
program mostness(inputtype, outputtype);

type xType = (x1, x2, x3);
     xTypeArray = array[xType] of integer;

var xArray : xTypeArray;
    y : xType;

function iCannotReturn(var int : integer) : integer;
begin
    while int < 10 do
    begin
        int := int + 1;
    end;
    
    if int >= 11 then
        int := maxint;
end; { $ERR_DATA$ [0, "missing unconditional function return value assignment", ["missing function return value assignment"]] $ERR_DATA$ }
    
    
function iCanReturn(int : integer) : integer;
begin
    while int < 10 do
    begin
        iCanReturn := iCanReturn - 1;
        int := int + 1;
    end;
    
    if int >= 11 then
        iCanReturn := maxint;
end;  // WARNING!
    
function whatDoIReturn(x : xType; i : integer) : xTypeArray; { $ERR_DATA$ [61, "illegal return type (not a simple type)", ["illegal function return type"]] $ERR_DATA$ }
    var xArray : xTypeArray;
    
begin
    xArray[x1] := 4;
    xArray[x] := i;
    xArray[x3] := 6;
    
    whatDoIReturn := xArray;
end; // good return
    
function canIReturn(x : xType; i : integer) : xType; // Legal return type
    var outputtype : char;
    
begin
    if (xArray[x] = i) then
        y := x
    else
        canIReturn := canIReturn(x, i + 1)
end; // WARNING!

function returnValue() : integer;
begin
    while false do
        returnValue := 0;

    if iCanReturn(1) = 1 then
        returnValue := 5
end; // WARNING!

function correctReturn(int : integer) : boolean;
begin
    if int >= 19 then
        correctReturn := true
    else
        if int <= -10 then
            correctReturn := false
        else if int <= 0 then
            correctReturn := true
        else
            correctReturn := false
end; // good return

function checkRet(int : integer) : integer;
begin
    if true then checkRet := 4;
    
    if false then
        checkRet := 4
    else if true then
        begin
        checkRet := 4;
        if false then
            write//checkRet := 4
        else
            write//checkRet := 4
        end
    else if false then
        checkRet := 4
    else
        checkRet := 4;
end; // good return

function checkRet1(int : integer) : integer;
begin
    if false then
        checkRet1 := 4
    else if true then
        begin
        if false then
            checkRet1 := 4
        else
            checkRet1 := 4
        end
    else if false then
        checkRet1 := 4
    else
        checkRet1 := 4;
end; // good return

function checkRet2(int : integer) : integer;
begin
    if false then
        checkRet2 := 4
    else if true then
        begin
        if false then
            write//checkRet := 4
        else
            write;//checkRet := 4
        checkRet2 := 4;
        end
    else if false then
        checkRet2 := 4
    else
        checkRet2 := 4;
end; // good return

begin
// nothing here
end.
