{
    7.pal
    Plays in the convoluted control flow of a state machine, and asks for
    states until a correct combination of states has been reached.
    
    Input:
    b
    l
    u
    g
    g
    u
    
    Expected output:
    What is the state now (g, b, u)? 

    state1 = bad; state2 = ugly; state3 = ugly

    What is the state now (g, b, u)? 
    Invalid state indicator!
    What is the state now (g, b, u)? 

    state1 = bad; state2 = ugly; state3 = ugly

    What is the state now (g, b, u)? 

    state1 = bad; state2 = ugly; state3 = good

    What is the state now (g, b, u)? 

    state1 = good; state2 = ugly; state3 = good

    What is the state now (g, b, u)? 

    state1 = good; state2 = ugly; state3 = good

    You have escaped the state machine!

    state1 = good; state2 = ugly; state3 = good

}
program ControlTheFlow (io, oi);

type states = (good, bad, ugly);

var state1 : states;
    state2 : states;
    state3 : states;
    counter : integer;
    
procedure incrCounter();
// increments counter up to 3, with an overflow of 1
    const MAXCOUNT = 3;

    begin
        if counter >= MAXCOUNT then
            counter := 1
        else
            counter := counter + 1;
    end;
    
procedure setState(var state : states; currState : char);
// sets state based on currState
    begin
        if currState = 'g' then
            state := good
        else if currState = 'b' then
            state := bad
        else // currState = 'u'
            state := ugly;
    end;

procedure displayStates();
// displays the state of the three states
    var stateArray : array[1..3] of states;
        stateNum : integer;

    begin
        stateArray[1] := state1;
        stateArray[2] := state2;
        stateArray[3] := state3;
        stateNum := 1;
        
        writeln;
        
        while stateNum <= 3 do
        begin
            if stateArray[stateNum] = good then
                write('state', stateNum, ' = good')
            else if stateArray[stateNum] = bad then
                write('state', stateNum, ' = bad')
            else
                write('state', stateNum, ' = ugly');
            
            if stateNum <> 3 then
                write('; ');
            
            stateNum := stateNum + 1;
        end;
        
        writeln;
        writeln;
    end;

function invalidState(state : char) : boolean;
// returns whether state is a valid state indicator ('g', 'b', or 'u')
    begin
        invalidState := (state <> 'g') and (state <> 'b') and (state <> 'u');
    end;
    
function readState() : char;
// reads the current state until it gets a valid one
    var state : char;

    begin
        write('What is the state now (g, b, u)? ');
        readln(state);
        
        while invalidState(state) do 
        begin
            writeln('Invalid state indicator!');
            write('What is the state now (g, b, u)? ');
            readln(state);
        end;
        
        readState := state;
    end;
    
procedure getState();
// asks for the current state and sets it based on user input (will not accept
// an invalid state indicator), displays the states, and increments the counter
    var currState : char;

    begin
        currState := readState();

        if counter = 1 then
            setState(state1, currState)
        else if counter = 2 then
            setState(state2, currState)
        else // counter = 3
             setState(state3, currState);
        
        displayStates();
        incrCounter();
    end;

begin
    state1 := ugly;
    state2 := ugly;
    state3 := ugly;
    counter := 1;
    
    getState();
    
    // don't ask me to explain it ...
    while state1 <> good do
    begin
        getState();
        
        if state3 = bad then
            continue;
        
        while state2 <> good do
        begin
            getState();
            
            if state1 = good then
                exit;
            
            if state1 = bad then
            begin
                while state3 = ugly do
                    getState();
            end
            else if state1 = ugly then
                getState();
            
            if state3 = good then
                exit;
            
        end;
        
        if state3 <> good then
        begin
            state1 := ugly; // not so fast ...
            continue
        end;
        
    end;
    
    writeln('You have escaped the state machine!');
    displayStates();
end.
