{
    0.pal
    Tests syntax of invalid arithmetic expressions and array definitions.
    Errors:
    22:42 unexpected real number in array definition
    23:46 unfinished array definition, unexpected ]
    42:34 unexpected addition operator
}



program correctNames (input, output);
// Reads an integer input and naively counts the number of even and odd numbers
// between that integer and zero.

type tf = (true, false);

var numOdd : integer;
    numEven : integer;
    number : integer;
    memoryGreedy : array[integer] of array[tf] of real; // Warning!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    randArray : array[4..45] of tf; // Legal.
    anotherArray : array[true..false] of 3.4; { $ERR_DATA$ [42, "unexpected real number in array definition", ["unexpected REAL_CONST"]] $ERR_DATA$ }
    bob, joe : array[-2..1] of array[3..{LOL}] of char; { $ERR_DATA$ [46, "unfinished array definition, unexpected ]", ["unexpected REAL_CONST"]] $ERR_DATA$ }
    
function countEven() : integer;
    var counter : integer;
        numEven : integer;
    function isEven(number : integer) : tf;
    begin
        if (number mod 2) = 0 then
            isEven := true
        else counter := 0;
            isEven := false;
    end;
begin
    counter := abs(number) + 1;
    numEven := 0;
    while counter >= 0 do
    begin
        counter := counter - (+1);  // Legal.
        if isEven(counter) = true then
            numEven := numEven + +1; { $ERR_DATA$ [34, "unexpected addition operator", ["unexpected PLUS"]] $ERR_DATA$ }
    end;
    countEven := numEven;
end;

procedure countOdd(counter : integer; useless : char);
begin
    counter := -1*number + 1; // Legal.
    counter := -number; // Legal.
    while counter >= 0 do
    begin
        counter := counter - 1;
        if (counter mod 2) = 1 then
            numOdd := numOdd + 1;
    end;
end;

begin

read(number);
numOdd := 0;
countOdd(number, '?');
numEven := countEven();
writeln('n = ', number, ' o = ', numOdd, ' e = ', numEven);

end.
