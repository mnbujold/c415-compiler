{
    6.pal
    Tests the precision of builtin functions compared to actual constants.
}
program Precision(useless, parameters);

const PI = 3.141592653589793;
      E = 2.718281828459045;
      GAMMA = 0.577215664901532;
      CONSTPRECISION = 15;
      BUILTINPRECISION = 6;
      NMAX = 3.40282347E38; // IEEE standard for largest positive value
      NMIN = 1 / NMAX;

function confuseCompiler(var value : real) : real;
// stops smart compilers from calculating values themselves, the cheaters!
    begin
        value := value * 1.0;
        confuseCompiler := 1.0 * value;
    end;
      
{ Functions to compare builtin calculated values versus 'actual' values: }

function power(base : real; exponent : real) : real; // power/pow could be a builtin ...
// raises base to the power of exponent using builtins
    begin
        power := exp(exponent * ln(base));
    end;
    
function adjust(value : real; precision : integer; rounded : boolean) : real;
// returns value with precision number of decimal places, with rounding
// depending on rounded
    var realAdjusted : real;
        adjustment : real;
    
    begin
        adjustment := power(10, precision);
        realAdjusted := value * adjustment;
        
        if rounded then
            adjust := round(realAdjusted) / adjustment
        else
            adjust := trunc(realAdjusted) / adjustment;
    end;            

function compare(builtin : real; actual : real; precision : integer) : boolean;
// returns true if builtin equals actual at precision level of significant
// digits for any combination of the rounded or truncated cases
    begin
        compare := (adjust(builtin, precision, true) = adjust(builtin, precision, true))
                or (adjust(builtin, precision, false) = adjust(builtin, precision, false))
                or (adjust(builtin, precision, true) = adjust(builtin, precision, false))
                or (adjust(builtin, precision, false) = adjust(builtin, precision, true));
    end;

{ Functions calculate the math constants using builtins (mostly): }
    
function calculatePi() : real;
// uses builtins (and the pi constant) to calculate pi
    begin
        calculatePi := NMAX * sin(PI / NMAX);
    end;

function calculateE() : real;
// uses builtins to calculate e
    const NMAX = 9.99999999E7; // need smaller values so we don't overflow
          NMIN = 1 / NMAX;
      
    begin
        calculateE := power((1 + NMIN), NMAX);
    end;

function calculateGamma() : real;
// uses builtins to calculate gamma
//     const MAXITERS = 9.9999E4

    var gammaTemp : real;
        iteration : real;

    begin
        iteration := 1;
        gammaTemp := 0;
        
        while iteration < maxint do
        begin
            gammaTemp := gammaTemp + (1 / iteration);
            iteration := iteration + 1;
        end;
        
        calculateGamma := gammaTemp - ln(maxint);
    end;

begin
    writeln(calculatePi());
    writeln(calculateE());
    writeln(calculateGamma());
end.
